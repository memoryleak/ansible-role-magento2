---
- name: Check if content deploy enforcement is active.
  set_fact:
    __magento2_execute_content_deploy_force: "-f "
  tags: ['set_fact']
  when: magento2_execute_content_deploy_force == true

# tasks file for memoryleak.magento2
- name: Import initialization tasks.
  import_tasks: initialization.yml
  tags: ['import_tasks']

- name: Include installation method tasks.
  include_tasks: "installation-{{ magento2_installation_method }}.yml"
  tags: ['include_tasks']
  when: magento2_execute_install

- name: Initialize install command string.
  set_fact:
    magento_install_command: "php bin/magento setup:install"

- name: Append arguments to string.
  set_fact:
    magento_install_command: "{{ magento_install_command }} --{{ item.name }}='{{ item.value }}'"
  with_items: "{{ magento2_setup_parameters }}"

- name: Start Magento 2 installation.
  become_user: "{{magento2_runtime_user}}"
  shell: "{{ magento_install_command }}"
  args:
    chdir: "{{ magento2_installation_parent }}/{{ magento2_installation_name }}"
    executable: php
  tags: ['shell']
  when: magento2_execute_setup
  register: magento2_setup_output

- name: Check if installation was successful.
  assert:
    msg: "Installation failed"
    that: magento2_setup_output.stdout.find("Magento installation complete.") == -1
  tags: ['assert']
  when: magento2_execute_setup

- name: Copy config.php if provided.
  become_user: "{{magento2_runtime_user}}"
  copy:
    dest: "{{ magento2_installation_parent }}/{{ magento2_installation_name }}/app/etc/config.php"
    src: "{{ magento2_override_config_file }}"
  tags: ['copy']
  when: magento2_override_config_file != false

- name: Copy env.php if provided.
  become_user: "{{ magento2_runtime_user }}"
  copy:
    dest: "{{ magento2_installation_parent }}/{{ magento2_installation_name }}/app/etc/env.php"
    src: "{{ magento2_override_env_file }}"
  tags: ['copy']
  when: magento2_override_env_file != false

- name: Delete existing media folder
  become_user: "{{magento2_runtime_user}}"
  file:
    path: "{{ magento2_installation_parent }}/{{ magento2_installation_name }}/pub/media"
    state: absent
  tags: ['file']
  when: magento2_shared_media_folder != false

- name: Create symlink for media folder
  become_user: "{{magento2_runtime_user}}"
  file:
    path: "{{ magento2_installation_parent }}/{{ magento2_installation_name }}/pub/media"
    src: "{{ magento2_shared_media_folder }}"
    state: link
  tags: ['file']
  when: magento2_shared_media_folder != false

- name: Magento CLI commands.
  become_user: "{{magento2_runtime_user}}"
  shell: "php -d display_errors=1 -d set_time_limit={{ magento2_cli_timeout }} -d memory_limit={{ magento2_cli_memory_limit }} {{ magento2_installation_parent }}/{{ magento2_installation_name }}/bin/magento {{ item }}"
  tags: ['Magento', 'shell']
  with_items: "{{ magento2_magento_cli_commands }}"

- name: Magento content deploy.
  become_user: "{{magento2_runtime_user}}"
  shell: php -d display_errors=1 -d set_time_limit={{ magento2_cli_timeout }} -d memory_limit={{ magento2_cli_memory_limit }} {{ magento2_installation_parent }}/{{ magento2_installation_name }}/bin/magento setup:static-content:deploy {{ __magento2_execute_content_deploy_force }}{{ item }} 
  tags: ['Magento', 'shell']
  when: magento2_execute_content_deploy
  with_items: "{{ magento2_deploy_languages }}"

- name: Set proper ownwernship of repository files.
  file:
    group: "{{magento2_runtime_group}}"
    mode: 0775
    owner: "{{magento2_runtime_user}}"
    path: "{{ magento2_installation_parent }}/{{ magento2_installation_name }}"
    recurse: true
    state: directory
  tags: ['file']

- name: Include cron installation tasks.
  include_tasks: "cronjobs.yml"
  tags: ['include_tasks']
  when: magento2_install_cron
